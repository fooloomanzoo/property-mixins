{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "Mixin that provides web-color-properties. Its `color-string` converts automatically beetween different formats (hex, rgb and hsl) and provides an alpha-colorString.",
      "summary": "",
      "path": "color-mixin.html",
      "properties": [
        {
          "name": "hex",
          "type": "string | null | undefined",
          "description": "Hex-color",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_hexChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "r",
          "type": "number | null | undefined",
          "description": "Red",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 10
            },
            "end": {
              "line": 59,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "g",
          "type": "number | null | undefined",
          "description": "Green",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "b",
          "type": "number | null | undefined",
          "description": "Blue",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 10
            },
            "end": {
              "line": 75,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "h",
          "type": "number | null | undefined",
          "description": "Hue",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "s",
          "type": "number | null | undefined",
          "description": "Saturation (hsl)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 10
            },
            "end": {
              "line": 91,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "l",
          "type": "number | null | undefined",
          "description": "Lightness",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 10
            },
            "end": {
              "line": 99,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "alpha",
          "type": "number | null | undefined",
          "description": "Alpha",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 10
            },
            "end": {
              "line": 109,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_alphaChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "alphaMode",
          "type": "boolean | null | undefined",
          "description": "if true, colorString has alpha",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_alphaModeChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "withoutAlpha",
          "type": "boolean | null | undefined",
          "description": "if true, alpha won't be used",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_withoutAlphaChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "hslPrecision",
          "type": "number | null | undefined",
          "description": "Precision of hsl-colorStrings, if the format is 'hsl' (for saturation and lightness it is applied according to their percentage colorString)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 10
            },
            "end": {
              "line": 134,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "format of the colorString (possible colorStrings: 'rgb', 'hex', 'hsl', 'auto')",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 144,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_formatChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\""
        },
        {
          "name": "fixedFormat",
          "type": "boolean | null | undefined",
          "description": "format is locked and does not switch according to the colorString",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 10
            },
            "end": {
              "line": 151,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_hexAlphaSupported",
          "type": "boolean | null | undefined",
          "description": "if true, hex alpha is supported by the browser",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 10
            },
            "end": {
              "line": 159,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "colorString",
          "type": "string | null | undefined",
          "description": "value as color-string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 10
            },
            "end": {
              "line": 168,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_colorStringChanged\"",
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 182,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "randomColor",
          "description": "generate random color",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 190,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "resetColor",
          "description": "reset all color properties",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createTestCanvas",
          "description": "creates a canvas for testing a color string and browser capabilities",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_testColor",
          "description": "test a color string in local browser environment",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "colorString"
            }
          ]
        },
        {
          "name": "_colorStringChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "colorString"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeColorString",
          "description": "compute color string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rgb",
              "type": "rgbObject",
              "description": "The rgb object"
            },
            {
              "name": "hsl",
              "type": "hslObject",
              "description": "The hsl object"
            },
            {
              "name": "hex",
              "type": "String",
              "description": "The hex string"
            },
            {
              "name": "oldColor",
              "type": "String",
              "description": "The old color string before setting"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "The computed color string"
          }
        },
        {
          "name": "_hexChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 6
            },
            "end": {
              "line": 453,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_rgbChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 455,
              "column": 6
            },
            "end": {
              "line": 499,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "g"
            },
            {
              "name": "b"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hslChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 501,
              "column": 6
            },
            "end": {
              "line": 544,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h"
            },
            {
              "name": "s"
            },
            {
              "name": "l"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_formatChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 546,
              "column": 6
            },
            "end": {
              "line": 562,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "format"
            },
            {
              "name": "oldFormat"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_alphaChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 564,
              "column": 6
            },
            "end": {
              "line": 594,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "oldAlpha"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_alphaModeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 596,
              "column": 6
            },
            "end": {
              "line": 617,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alphaMode"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_withoutAlphaChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 619,
              "column": 6
            },
            "end": {
              "line": 629,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hexToRgb",
          "description": "convert hex to rgb",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 636,
              "column": 6
            },
            "end": {
              "line": 649,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "The hex string without alpha"
            }
          ],
          "return": {
            "type": "rgbObject",
            "desc": "the rgb object"
          }
        },
        {
          "name": "rgbToHex",
          "description": "convert hex to rgb",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 656,
              "column": 6
            },
            "end": {
              "line": 661,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rgb"
            }
          ],
          "return": {
            "type": "rgbObject",
            "desc": "the rgb object"
          }
        },
        {
          "name": "rgbToHsl",
          "description": "convert rgb to hsl (the values are not rounded)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 669,
              "column": 6
            },
            "end": {
              "line": 705,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rgb",
              "type": "rgbObject",
              "description": "rgb object"
            },
            {
              "name": "defaultH",
              "type": "Number",
              "description": "hue to set if saturation is 0"
            }
          ],
          "return": {
            "type": "hslObject",
            "desc": "hsl object"
          }
        },
        {
          "name": "hslToRgb",
          "description": "convert hsl to rgb (the values are not rounded)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 712,
              "column": 6
            },
            "end": {
              "line": 723,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hsl",
              "type": "hslObject",
              "description": "hsl object"
            }
          ],
          "return": {
            "type": "rgbObject",
            "desc": "rgb object"
          }
        },
        {
          "name": "_componentToHex",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 725,
              "column": 6
            },
            "end": {
              "line": 732,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "component"
            }
          ]
        },
        {
          "name": "_alphaToHex",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 734,
              "column": 6
            },
            "end": {
              "line": 740,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "length"
            }
          ]
        },
        {
          "name": "_hexToAlpha",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 742,
              "column": 6
            },
            "end": {
              "line": 746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            },
            {
              "name": "length"
            }
          ]
        },
        {
          "name": "_hueToComponent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 748,
              "column": 6
            },
            "end": {
              "line": 755,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "t1"
            },
            {
              "name": "t2"
            },
            {
              "name": "h"
            }
          ]
        },
        {
          "name": "_normalizeRgb",
          "description": "normalize rgb values",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 762,
              "column": 5
            },
            "end": {
              "line": 767,
              "column": 6
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rgb",
              "type": "rgbObject",
              "description": "The rgb-object of which the values should be normalized"
            }
          ],
          "return": {
            "type": "rgbObject",
            "desc": "The normalized rgb-object."
          }
        },
        {
          "name": "_normalizeHsl",
          "description": "normalize hsl values",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 774,
              "column": 5
            },
            "end": {
              "line": 779,
              "column": 6
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hsl"
            }
          ],
          "return": {
            "type": "hslObject",
            "desc": "The normalized hsl-object."
          }
        },
        {
          "name": "_randomRgb",
          "description": "generate random rgb-color",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 785,
              "column": 5
            },
            "end": {
              "line": 791,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "rgbObject",
            "desc": "rgb-color object"
          }
        },
        {
          "name": "_randomHsl",
          "description": "generate random hsl-color",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 797,
              "column": 5
            },
            "end": {
              "line": 803,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "hslObject",
            "desc": "hsl-color object"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/color-demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 26,
          "column": 2
        },
        "end": {
          "line": 805,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "ColorMixin",
      "attributes": [
        {
          "name": "hex",
          "description": "Hex-color",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "r",
          "description": "Red",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 10
            },
            "end": {
              "line": 59,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "g",
          "description": "Green",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "b",
          "description": "Blue",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 10
            },
            "end": {
              "line": 75,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "h",
          "description": "Hue",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "s",
          "description": "Saturation (hsl)",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 10
            },
            "end": {
              "line": 91,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "l",
          "description": "Lightness",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 10
            },
            "end": {
              "line": 99,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "alpha",
          "description": "Alpha",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 10
            },
            "end": {
              "line": 109,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "alpha-mode",
          "description": "if true, colorString has alpha",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "without-alpha",
          "description": "if true, alpha won't be used",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hsl-precision",
          "description": "Precision of hsl-colorStrings, if the format is 'hsl' (for saturation and lightness it is applied according to their percentage colorString)",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 10
            },
            "end": {
              "line": 134,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "format",
          "description": "format of the colorString (possible colorStrings: 'rgb', 'hex', 'hsl', 'auto')",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 144,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "fixed-format",
          "description": "format is locked and does not switch according to the colorString",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 10
            },
            "end": {
              "line": 151,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "color-string",
          "description": "value as color-string",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 10
            },
            "end": {
              "line": 168,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "Mixin that provides intl-format-locale for datetime and computes some separation strings for usage.",
      "summary": "",
      "path": "intl-datetime-format-mixin.html",
      "properties": [
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "dateSeparator",
          "type": "string",
          "description": "Separator for local date values (date-string is still in ISO-Format)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "timeSeparator",
          "type": "string",
          "description": "Separator for local time values (time-string is still in ISO-Format)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "amString",
          "type": "string | null | undefined",
          "description": "locale representation of 'AM'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "pmString",
          "type": "string | null | undefined",
          "description": "locale representation of 'PM'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "dateOrder",
          "type": "Object | null | undefined",
          "description": "order of date-parts",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 81,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"parts\":[],\"timeFirst\":false,\"dateFirst\":true}"
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 6
            },
            "end": {
              "line": 279,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 2
        },
        "end": {
          "line": 281,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "IntlDatetimeFormatMixin",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "date-separator",
          "description": "Separator for local date values (date-string is still in ISO-Format)",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "time-separator",
          "description": "Separator for local time values (time-string is still in ISO-Format)",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "am-string",
          "description": "locale representation of 'AM'",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "pm-string",
          "description": "locale representation of 'PM'",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "date-order",
          "description": "order of date-parts",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 81,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "Mixin that provides datetime-properties",
      "summary": "",
      "path": "datetime-mixin.html",
      "properties": [
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 28,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "dateSeparator",
          "type": "string",
          "description": "Separator for local date values (date-string is still in ISO-Format)",
          "privacy": "public",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 37,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "timeSeparator",
          "type": "string",
          "description": "Separator for local time values (time-string is still in ISO-Format)",
          "privacy": "public",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 46,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "amString",
          "type": "string | null | undefined",
          "description": "locale representation of 'AM'",
          "privacy": "public",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "pmString",
          "type": "string | null | undefined",
          "description": "locale representation of 'PM'",
          "privacy": "public",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 62,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "dateOrder",
          "type": "Object | null | undefined",
          "description": "order of date-parts",
          "privacy": "public",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 81,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"parts\":[],\"timeFirst\":false,\"dateFirst\":true}",
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "year",
          "type": "number | null | undefined",
          "description": "The year of the selected date",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "month",
          "type": "number | null | undefined",
          "description": "The month of the selected date (starts with 1)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "day",
          "type": "number | null | undefined",
          "description": "The day of the selected date",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "hour",
          "type": "number | null | undefined",
          "description": "The hour of the selected time",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "hour12",
          "type": "number",
          "description": "hour in 12-hour-format",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_hour12Changed\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "isAm",
          "type": "boolean",
          "description": "true, when A.M. (when `hour` < 12)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_isAmChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "minute",
          "type": "number | null | undefined",
          "description": "The minute of the selected time",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "second",
          "type": "number | null | undefined",
          "description": "The second of the selected time",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 109,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "millisecond",
          "type": "number | null | undefined",
          "description": "The millisecond of the selected time",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "datetime",
          "type": "string | null | undefined",
          "description": "the selected date and time (format: iso8601)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 125,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "date",
          "type": "string | null | undefined",
          "description": "the selected date (format: iso8601)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "time",
          "type": "string | null | undefined",
          "description": "the selected time (format: iso8601)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 10
            },
            "end": {
              "line": 141,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "valueAsDate",
          "type": "Date | null | undefined",
          "description": "The date-object of the selected date",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 10
            },
            "end": {
              "line": 150,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueAsDateChanged\"",
              "attributeType": "Date"
            }
          }
        },
        {
          "name": "valueAsNumber",
          "type": "number | null | undefined",
          "description": "The value of the selected date",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 10
            },
            "end": {
              "line": 159,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueAsNumberChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "The default value of the input, could be a number, a date-object or an iso-string in time, date or datetime-notation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 10
            },
            "end": {
              "line": 167,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "min",
          "type": "Object | null | undefined",
          "description": "The minimal date, could be a number, a date-object or an iso-string in time, date or datetime-notation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 10
            },
            "end": {
              "line": 176,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_minChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_minValue",
          "type": "number | null | undefined",
          "description": "value if the minimum date",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 10
            },
            "end": {
              "line": 183,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "max",
          "type": "Object | null | undefined",
          "description": "The maximal date, could be a number, a date-object or an iso-string in time, date or datetime-notation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 192,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_maxChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_maxValue",
          "type": "number | null | undefined",
          "description": "value if the maximum date",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 10
            },
            "end": {
              "line": 199,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "hour12Format",
          "type": "boolean",
          "description": "when true, 12-hour time format, else 24-hour",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 10
            },
            "end": {
              "line": 209,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "clamp",
          "type": "string | null | undefined",
          "description": "Clamp datetime to a property\npossible values:'month', 'day', 'hour', 'minute', 'second', 'millisecond'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 10
            },
            "end": {
              "line": 219,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_clampChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "timezone",
          "type": "string | null | undefined",
          "description": "The timezone offset in '±hh:mm' format",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 10
            },
            "end": {
              "line": 228,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_timezoneChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "offsetMinutes",
          "type": "number | null | undefined",
          "description": "The offset minutes of the set timezone",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 10
            },
            "end": {
              "line": 237,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_offsetMinutesChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_timeZoneHours",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 10
            },
            "end": {
              "line": 241,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_timeZoneMinutes",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 10
            },
            "end": {
              "line": 245,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_recentLocalTimezoneOffset",
          "type": "number | null | undefined",
          "description": "The offset minute of the current datetime",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 10
            },
            "end": {
              "line": 252,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_timeOnly",
          "type": "boolean | null | undefined",
          "description": "if true perspective starts at 0 (1970-01-01)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 10
            },
            "end": {
              "line": 260,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_dateLocked",
          "type": "boolean | null | undefined",
          "description": "if true, time will be `00:00:00.000`",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 10
            },
            "end": {
              "line": 268,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 91,
              "column": 6
            },
            "end": {
              "line": 279,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "overwritten of polymer to handle -0",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ]
        },
        {
          "name": "now",
          "description": "Sets value to the actual date",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setDate",
          "description": "sets date to all necessary properties",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 6
            },
            "end": {
              "line": 364,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": "[the date to set]"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "resetDate",
          "description": "resets the date (if `default` is set, it will be used for the new value)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 370,
              "column": 6
            },
            "end": {
              "line": 403,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "[a causing event will not propagated]"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 6
            },
            "end": {
              "line": 412,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDatetime",
          "description": "compute date by date properties",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 424,
              "column": 6
            },
            "end": {
              "line": 490,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "year",
              "type": "number"
            },
            {
              "name": "month",
              "type": "number"
            },
            {
              "name": "day",
              "type": "number"
            },
            {
              "name": "hour",
              "type": "number"
            },
            {
              "name": "minute",
              "type": "number"
            },
            {
              "name": "second",
              "type": "number"
            },
            {
              "name": "millisecond",
              "type": "number"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dateTimeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 492,
              "column": 6
            },
            "end": {
              "line": 519,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "date"
            },
            {
              "name": "time"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_datetimeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 521,
              "column": 6
            },
            "end": {
              "line": 563,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datetime"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 565,
              "column": 6
            },
            "end": {
              "line": 571,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueAsDateChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 573,
              "column": 6
            },
            "end": {
              "line": 584,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fromDatetime",
          "description": "compute a date object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 591,
              "column": 6
            },
            "end": {
              "line": 632,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datetime"
            },
            {
              "name": "offsetMinutes"
            }
          ],
          "return": {
            "type": "Date",
            "desc": "date"
          }
        },
        {
          "name": "_checkThreshold",
          "description": "test date object against thresholds",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 639,
              "column": 6
            },
            "end": {
              "line": 650,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date"
            }
          ],
          "return": {
            "type": "Date",
            "desc": "ether the threshold when the date is exceeding or the date object itself"
          }
        },
        {
          "name": "_toDate",
          "description": "get date string from a date object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 657,
              "column": 6
            },
            "end": {
              "line": 663,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": "the Date to serialize"
            }
          ],
          "return": {
            "type": "String",
            "desc": "date string"
          }
        },
        {
          "name": "_toTime",
          "description": "get UTC time string from a date object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 670,
              "column": 6
            },
            "end": {
              "line": 675,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": "the Date to serialize"
            }
          ],
          "return": {
            "type": "String",
            "desc": "date string"
          }
        },
        {
          "name": "_toUTCDate",
          "description": "get UTC date string from a date object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 682,
              "column": 6
            },
            "end": {
              "line": 688,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": "the Date to serialize"
            }
          ],
          "return": {
            "type": "String",
            "desc": "date string"
          }
        },
        {
          "name": "_toUTCTime",
          "description": "get UTC time string from a date object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 695,
              "column": 6
            },
            "end": {
              "line": 700,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": "the Date to serialize"
            }
          ],
          "return": {
            "type": "String",
            "desc": "time string"
          }
        },
        {
          "name": "__toDate",
          "description": "get date string from date components",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 709,
              "column": 6
            },
            "end": {
              "line": 711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "year",
              "type": "Number"
            },
            {
              "name": "month",
              "type": "Number"
            },
            {
              "name": "day",
              "type": "Number"
            }
          ],
          "return": {
            "type": "String",
            "desc": "date string"
          }
        },
        {
          "name": "__toTime",
          "description": "get time string from date components",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 721,
              "column": 6
            },
            "end": {
              "line": 723,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hour",
              "type": "Number"
            },
            {
              "name": "minute",
              "type": "Number"
            },
            {
              "name": "second",
              "type": "Number"
            },
            {
              "name": "millisecond",
              "type": "Number"
            }
          ],
          "return": {
            "type": "String",
            "desc": "time string"
          }
        },
        {
          "name": "_clampUTC",
          "description": "clamp UTC values",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 731,
              "column": 6
            },
            "end": {
              "line": 748,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": "the Date to clamp"
            },
            {
              "name": "clamp",
              "type": "String",
              "description": "the date component to clamp"
            }
          ],
          "return": {
            "type": "Date",
            "desc": "the clamped date"
          }
        },
        {
          "name": "_pad",
          "description": "pad a string with 0",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 756,
              "column": 6
            },
            "end": {
              "line": 762,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number",
              "description": "number to pad"
            },
            {
              "name": "padLength",
              "type": "Number",
              "description": "total length of strings"
            }
          ],
          "return": {
            "type": "String",
            "desc": "padded string"
          }
        },
        {
          "name": "_ifClamped",
          "description": "clamp to date component",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 771,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "clamp"
            },
            {
              "name": "comp"
            },
            {
              "name": "hidden"
            }
          ]
        },
        {
          "name": "_ifNotClamped",
          "description": "clamp to date component",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 775,
              "column": 6
            },
            "end": {
              "line": 777,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "clamp"
            },
            {
              "name": "comp"
            },
            {
              "name": "hidden"
            }
          ]
        },
        {
          "name": "_checkDefaultTimezone",
          "description": "set the default timezone if needed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 796,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeTimezoneShift",
          "description": "correct a timezone shift when date changes from winter to summertime (locally)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 802,
              "column": 6
            },
            "end": {
              "line": 811,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d",
              "type": "Date"
            }
          ]
        },
        {
          "name": "_clampChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 813,
              "column": 6
            },
            "end": {
              "line": 821,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "clamp"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_minChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 823,
              "column": 6
            },
            "end": {
              "line": 840,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_maxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 842,
              "column": 6
            },
            "end": {
              "line": 859,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "max"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_minMaxValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 861,
              "column": 6
            },
            "end": {
              "line": 865,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hour12Changed",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 867,
              "column": 6
            },
            "end": {
              "line": 873,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hour12"
            },
            {
              "name": "old"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isAmChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 875,
              "column": 6
            },
            "end": {
              "line": 879,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isAm"
            },
            {
              "name": "old"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_timezoneChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 881,
              "column": 6
            },
            "end": {
              "line": 904,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "timezone"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_offsetMinutesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 906,
              "column": 6
            },
            "end": {
              "line": 916,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "offsetMinutes"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_timeZoneHoursMinutesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 918,
              "column": 6
            },
            "end": {
              "line": 937,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hour"
            },
            {
              "name": "minute"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeTimezone",
          "description": "compute the timezone properties from given offset minutes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 952,
              "column": 6
            },
            "end": {
              "line": 974,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "offsetMinutes",
              "type": "Number",
              "description": "The offset minutes"
            }
          ],
          "return": {
            "type": "TimeZoneProperties",
            "desc": "The timezone properties"
          }
        },
        {
          "name": "_computeTimezoneOffset",
          "description": "compute the timezone properties from a given timezone-string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 981,
              "column": 6
            },
            "end": {
              "line": 1011,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "timezone",
              "type": "String",
              "description": "The timezone-string"
            }
          ],
          "return": {
            "type": "TimeZoneProperties",
            "desc": "The timezone properties"
          }
        },
        {
          "name": "_computeMaxDayOfMonth",
          "description": "compute the last day of a month in a year",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1019,
              "column": 6
            },
            "end": {
              "line": 1027,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "year",
              "type": "Number",
              "description": "the year"
            },
            {
              "name": "month",
              "type": "Number",
              "description": "the month"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "the last day of the month"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/datetime-demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 2
        },
        "end": {
          "line": 1029,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "DatetimeMixin",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 28,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "date-separator",
          "description": "Separator for local date values (date-string is still in ISO-Format)",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 37,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "time-separator",
          "description": "Separator for local time values (time-string is still in ISO-Format)",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 46,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "am-string",
          "description": "locale representation of 'AM'",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "pm-string",
          "description": "locale representation of 'PM'",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 62,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "date-order",
          "description": "order of date-parts",
          "sourceRange": {
            "file": "intl-datetime-format-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 81,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "IntlDatetimeFormatMixin"
        },
        {
          "name": "year",
          "description": "The year of the selected date",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "month",
          "description": "The month of the selected date (starts with 1)",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "day",
          "description": "The day of the selected date",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "hour",
          "description": "The hour of the selected time",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "hour12",
          "description": "hour in 12-hour-format",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "is-am",
          "description": "true, when A.M. (when `hour` < 12)",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "minute",
          "description": "The minute of the selected time",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "second",
          "description": "The second of the selected time",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 109,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "millisecond",
          "description": "The millisecond of the selected time",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "datetime",
          "description": "the selected date and time (format: iso8601)",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 125,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "date",
          "description": "the selected date (format: iso8601)",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "time",
          "description": "the selected time (format: iso8601)",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 10
            },
            "end": {
              "line": 141,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-as-date",
          "description": "The date-object of the selected date",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 10
            },
            "end": {
              "line": 150,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Date | null | undefined"
        },
        {
          "name": "value-as-number",
          "description": "The value of the selected date",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 10
            },
            "end": {
              "line": 159,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "default",
          "description": "The default value of the input, could be a number, a date-object or an iso-string in time, date or datetime-notation",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 10
            },
            "end": {
              "line": 167,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "min",
          "description": "The minimal date, could be a number, a date-object or an iso-string in time, date or datetime-notation",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 10
            },
            "end": {
              "line": 176,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "max",
          "description": "The maximal date, could be a number, a date-object or an iso-string in time, date or datetime-notation",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 192,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "hour12-format",
          "description": "when true, 12-hour time format, else 24-hour",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 10
            },
            "end": {
              "line": 209,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "clamp",
          "description": "Clamp datetime to a property\npossible values:'month', 'day', 'hour', 'minute', 'second', 'millisecond'",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 10
            },
            "end": {
              "line": 219,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "timezone",
          "description": "The timezone offset in '±hh:mm' format",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 10
            },
            "end": {
              "line": 228,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "offset-minutes",
          "description": "The offset minutes of the set timezone",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 10
            },
            "end": {
              "line": 237,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "IntlDatetimeFormatMixin"
      ]
    },
    {
      "description": "Mixin that extends duration properties of a time period to an element.",
      "summary": "",
      "path": "duration-mixin.html",
      "properties": [
        {
          "name": "start",
          "type": "Object | null | undefined",
          "description": "start of the time period",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "end",
          "type": "Object | null | undefined",
          "description": "end of the time period",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "valueAsString",
          "type": "string | null | undefined",
          "description": "string representation of the time period",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 37,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_valueAsStringChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "valueAsNumber",
          "type": "number | null | undefined",
          "description": "value of the time period in milliseconds",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_valueAsNumberChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_regExpValueString",
          "type": "RegExp | null | undefined",
          "description": "RegExp of a valueString",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "RegExp"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_startEndChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 92,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "end"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueAsStringChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsString"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDurationString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_computeDurationValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueString"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 2
        },
        "end": {
          "line": 181,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "DurationMixin",
      "attributes": [
        {
          "name": "start",
          "description": "start of the time period",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "end",
          "description": "end of the time period",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "value-as-string",
          "description": "string representation of the time period",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 37,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-as-number",
          "description": "value of the time period in milliseconds",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "Mixin that provides intl-format-locale for numbers and computes some separation strings for usage (only `latn`-numeral-system is possible).",
      "summary": "",
      "path": "intl-number-format-mixin.html",
      "properties": [
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "decimalSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "groupingSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 10
            },
            "end": {
              "line": 58,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "maximumFractionDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 72,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "unit",
          "type": "string | null | undefined",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "unitSeparator",
          "type": "string | null | undefined",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\" \""
        },
        {
          "name": "alwaysSign",
          "type": "boolean | null | undefined",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "numberStyle",
          "type": "string | null | undefined",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"decimal\""
        },
        {
          "name": "useGrouping",
          "type": "boolean | null | undefined",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "currency",
          "type": "string | null | undefined",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "currencyDisplay",
          "type": "string | null | undefined",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_numberOptions",
          "type": "number | null | undefined",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 146,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "formatNumber",
          "type": "Function | null | undefined",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          }
        },
        {
          "name": "parseNumber",
          "type": "Function | null | undefined",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ]
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            },
            {
              "name": "unitSeparator"
            },
            {
              "name": "alwaysSign"
            }
          ]
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "groupingSeparator"
            },
            {
              "name": "numberOptions"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 2
        },
        "end": {
          "line": 400,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "IntlNumberFormatMixin",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information).",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 10
            },
            "end": {
              "line": 58,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "minimum-integer-digits",
          "description": "The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 72,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "mixin to provide a range behavior for a given value",
      "summary": "",
      "path": "range-mixin.html",
      "properties": [
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 37,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_stepChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "valueAsNumber",
          "type": "number",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueAsNumberChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "default",
          "type": "number",
          "description": "default-value of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 10
            },
            "end": {
              "line": 62,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "useNegativeZero",
          "type": "boolean",
          "description": "if true, the value will break on 0 to -0",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_checkValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ]
        },
        {
          "name": "_updateValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ]
        },
        {
          "name": "_safeMult",
          "description": "Emulating handwritten multiplication to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "?number",
              "description": "First summand"
            },
            {
              "name": "b",
              "type": "?number",
              "description": "Second summand"
            }
          ],
          "return": {
            "type": "number",
            "desc": "Sum"
          }
        },
        {
          "name": "_safeAdd",
          "description": "Emulating handwritten addition to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "?number",
              "description": "First factor"
            },
            {
              "name": "b",
              "type": "?number",
              "description": "Second factor"
            }
          ],
          "return": {
            "type": "number",
            "desc": "Product"
          }
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "increase",
          "description": "Increase value by step",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "decrease",
          "description": "Decrease value by step",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_shouldPropertyChange",
          "description": "overwritten of polymer to handle -0",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 276,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 9,
          "column": 2
        },
        "end": {
          "line": 278,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "RangeMixin",
      "attributes": [
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 37,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "value-as-number",
          "description": "value of the input",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "default",
          "description": "default-value of the input",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 10
            },
            "end": {
              "line": 62,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "use-negative-zero",
          "description": "if true, the value will break on 0 to -0",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
